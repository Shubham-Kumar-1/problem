#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'queensAttack' function below.
#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. INTEGER n
#  2. INTEGER k
#  3. INTEGER r_q
#  4. INTEGER c_q
#  5. 2D_INTEGER_ARRAY obstacles
#

def queensAttack(n, k, r_q, c_q, obstacles):
    # Write your code here
    SQUARE_INF = 1


    queen_inital_pos = [r_q, c_q]
    # Updaters for movements for every queen's direction
    updaters = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]
    
    max_movements_per_quadrant = {
        (-1, -1): min(r_q - SQUARE_INF, c_q - SQUARE_INF),
        (-1, 0): r_q - SQUARE_INF,
        (-1, 1): min(r_q - SQUARE_INF, n - c_q),
        (0, -1): c_q - SQUARE_INF,
        (0, 1):  n - c_q,
        (1, -1): min(n - r_q, c_q - SQUARE_INF),
        (1, 0): n - r_q,
        (1, 1): min(n - r_q, n - c_q),
    }
    # Faster than list for searching
    obstacles_set = {(r, c) for r, c in obstacles}
      
    all_movements = 0

    for updater in updaters:
       
        for step in range(1, max_movements_per_quadrant[updater] + 1):
            
            next_coord = (
                queen_inital_pos[0] + (updater[0] * step), 
                queen_inital_pos[1] + (updater[1] * step)
            )
            
            if next_coord in obstacles_set:
                break
            
            all_movements += 1
        
    return all_movements

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    n = int(first_multiple_input[0])

    k = int(first_multiple_input[1])

    second_multiple_input = input().rstrip().split()

    r_q = int(second_multiple_input[0])

    c_q = int(second_multiple_input[1])

    obstacles = []

    for _ in range(k):
        obstacles.append(list(map(int, input().rstrip().split())))

    result = queensAttack(n, k, r_q, c_q, obstacles)

    fptr.write(str(result) + '\n')

    fptr.close()
